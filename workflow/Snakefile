
bold = "\033[1m"
green = "\033[92m"
end = "\033[0m"
msg = f"""{green}{bold}Thanks for using Strong-Seq! We hope you enjoy the ride! \nIf you encounter problems please file an issue on git so we can improve (Feedback needed)! \n{end}{end}"""
sys.stderr.write(msg)


configfile: "config/Snake.config.yaml"

sseq_dir = config['path_to_sseq_bamdir']
ont_dir = config['path_to_longread_bamdir']

# Run-specific inputs: chromosomes, sseq cells to strongify, corresponding sample name in vcf and bam
CHROMS = config['chromosomes']
SSEQ_CELL = config['sseq_cellnames']
SAMPLE = config['sample']


rule all: 
    input:
        #expand('res/{sample}/strong-all/{sseq_cell}_strong.bam', sample=SAMPLE, sseq_cell=SSEQ_CELL),
        #expand('res/{sample}/strong-all/{sseq_cell}_strong.bam.bai', sample=SAMPLE, sseq_cell=SSEQ_CELL),
        expand('res/{sample}/strong-mini/{sseq_cell}_strong_mini.bed', sample=SAMPLE, sseq_cell=SSEQ_CELL)


rule get_onehap_strong_mini_one_chr:
    input:
        sseq_onehap = 'res/{sample}/{sseq_cell}/{chr}/sseq_split/sseq_h{haplotype}.bam',
        strong_all = 'res/{sample}/strong-all/{sseq_cell}_strong.bam'
    output:
        'res/{sample}/{sseq_cell}/{chr}/strong-mini-h{haplotype}/{sseq_cell}_strong_mini.bed'
    shell:
        """
        bash workflow/scripts/find_longest_ont_per_sseq.sh {input.sseq_onehap} {input.strong_all} {wildcards.chr} {wildcards.haplotype} {output} samtools bedtools
        """


rule combine_chr_strong_mini_into_one:
    input:
        expand('res/{{sample}}/{{sseq_cell}}/{chr}/strong-mini/{{sseq_cell}}_strong_mini.bed', chr=CHROMS),
    output:
        unsrt = 'res/{sample}/strong-mini/{sseq_cell}_strong_mini_unsrt.bed',
        srt = 'res/{sample}/strong-mini/{sseq_cell}_strong_mini.bed'
    shell:
        """
        cat {input} > {output.unsrt}
        bedtools sort -i {output.unsrt} > {output.srt}
        """

rule one_bed_mini_combine:
    input:
        h1_strong_mini = 'res/{sample}/{sseq_cell}/{chr}/strong-mini-h1/{sseq_cell}_strong_mini.bed',
        h2_strong_mini = 'res/{sample}/{sseq_cell}/{chr}/strong-mini-h2/{sseq_cell}_strong_mini.bed',
    output:
        "res/{sample}/{sseq_cell}/{chr}/strong-mini/{sseq_cell}_strong_mini.bed"
    shell:
        """
        cat {input.h1_strong_mini} {input.h2_strong_mini} > {output}
        """


rule merge_bams:
    input:
        expand('res/{{sample}}/{{sseq_cell}}/{chr}/strong_res/strong_reads_haplotagged.bam', chr = CHROMS)
    output:
        'res/{sample}/strong-all/{sseq_cell}_strong.bam'
    shell:
        """
        samtools merge {output} {input}
        samtools index {output}
        """

rule turn_seqq_bam_into_one_chr:
    input:
        bam = '{}/{{sseq_cell}}.bam'.format(sseq_dir)
    output: 
        bam_onechr = 'res/{sample}/{sseq_cell}/{chr}/sseq_split.bam'
    params:
        mapq_th = '60'
    shell:
        """
        # -q {params.mapq_th}: filters out reads with a MAPQ score lower than the threshold defined by {params.mapq_th}
        # -f 2: keeps only reads that are properly paired (both reads of the pair are correctly oriented with expected insert size)
        # -F 4: filters out reads that are not mapped
        # -F 8: filters out reads where the mate is not mapped
        # -F 256: filters out secondary alignments (keeps only the primary alignments)
        samtools view -b -q {params.mapq_th} -f 2 -F 4 -F 8 -F 256 {input.bam} {wildcards.chr} > {output.bam_onechr}
        """

rule turn_ont_bam_into_one_chr:
    input:
        bam = '{}/{{sample}}.bam'.format(ont_dir)
    output: 
        bam_onechr = 'res/{sample}/ont_bams/{chr}/ont_split.bam'
    params:
        mapq_th = '60'
    shell:
        """
        samtools view -b -q {params.mapq_th} -F 4 {input.bam} {wildcards.chr} > {output.bam_onechr}
        """

rule obtain_het_snp_vcf:
    output:
        "res/{sample}/het_vcfs/{chr}.vcf.gz"
    params:
        snp_file_dir = config['snp_file_dir'],
        ExcHet_th = '0.1'
    shell:
        """
        bcftools view -s {wildcards.sample} -i 'INFO/ExcHet > {params.ExcHet_th}' --exclude-types indels {params.snp_file_dir}/1kGP_high_coverage_Illumina.{wildcards.chr}.filtered.SNV_INDEL_SV_phased_panel.vcf.gz | grep -e "^#" -e "GT\t0|1" -e "GT\t1|0" | bgzip > {output} 
        """

rule split_sseq_h1_h2:
    input:
        sseq_cell = "res/{sample}/{sseq_cell}/{chr}/sseq_split.bam", 
        sseq_cell_idx = "res/{sample}/{sseq_cell}/{chr}/sseq_split.bam.bai", 
        snp_file = "res/{sample}/het_vcfs/{chr}.vcf.gz",
        snp_file_idx = "res/{sample}/het_vcfs/{chr}.vcf.gz.tbi"
    output:
        sseq_h1 = "res/{sample}/{sseq_cell}/{chr}/sseq_split/sseq_h1.bam",
        sseq_h2 = "res/{sample}/{sseq_cell}/{chr}/sseq_split/sseq_h2.bam",
        haplotag_list = 'res/{sample}/{sseq_cell}/{chr}/sseq_split/haplotags.tsv'
    params:
        ref_fa = config['ref_fa'] 
    shell:
        """
        whatshap haplotag \
                        -o res/{wildcards.sample}/{wildcards.sseq_cell}/{wildcards.chr}/tmp.bam \
                       --reference {params.ref_fa} \
                       {input.snp_file} \
                       {input.sseq_cell} \
                       --ignore-read-groups \
                       --skip-missing-contigs \
                       --output-haplotag-list {output.haplotag_list}

        whatshap split \
                        --output-h1 {output.sseq_h1} \
                        --output-h2 {output.sseq_h2} \
                        {input.sseq_cell} \
                        {output.haplotag_list}

        rm res/{wildcards.sample}/{wildcards.sseq_cell}/{wildcards.chr}/tmp.bam
        """


rule split_sseq_hx_plus_minus:
    input:
        in_bam = "res/{sample}/{sseq_cell}/{chr}/sseq_split/sseq_{hap}.bam"
    output:
        out_bam = "res/{sample}/{sseq_cell}/{chr}/sseq_split/sseq_{hap}_{direction}.bam"
    shell:
        """
        bash workflow/scripts/split_bam_by_direction_of_first_read.sh {input.in_bam} {output.out_bam} {wildcards.direction} samtools
        """


rule split_longreads_h1_h2:
    input:
        lr_bam = 'res/{sample}/ont_bams/{chr}/ont_split.bam', 
        lr_bam_idx = 'res/{sample}/ont_bams/{chr}/ont_split.bam.bai', 
        snp_file = "res/{sample}/het_vcfs/{chr}.vcf.gz",
        snp_file_idx = "res/{sample}/het_vcfs/{chr}.vcf.gz.tbi"
    output:
        lr_h1 = 'res/{sample}/{sseq_cell}/{chr}/lr_split/lr_h1.bam',
        lr_h2 = 'res/{sample}/{sseq_cell}/{chr}/lr_split/lr_h2.bam',
        haplotag_list = 'res/{sample}/{sseq_cell}/{chr}/lr_split/haplotags.tsv'
    params:
        ref_fa = config['ref_fa'] 
    shell: 
        """
        whatshap haplotag \
                        -o res/{wildcards.sample}/{wildcards.sseq_cell}/{wildcards.chr}/tmp2.bam \
                       --reference {params.ref_fa} \
                       {input.snp_file} \
                       {input.lr_bam} \
                       --ignore-read-groups \
                       --skip-missing-contigs \
                       --tag-supplementary \
                       --output-haplotag-list {output.haplotag_list}

        whatshap split \
                        --output-h1 {output.lr_h1} \
                        --output-h2 {output.lr_h2} \
                        {input.lr_bam} \
                        {output.haplotag_list}

        rm res/{wildcards.sample}/{wildcards.sseq_cell}/{wildcards.chr}/tmp2.bam
        """

rule make_eight_plusify_minusify:
    input:
        sseq_bam = "{foo}/sseq_split/sseq_{hap}_{direction}.bam",
        lr_bam =   "{foo}/lr_split/lr_{hap}.bam"
    output:
        tmp_file = '{foo}/lr_sseq_eightfiles/TEMP_lr_h{hap}_{direction}.tsv',
        plusify =  '{foo}/lr_sseq_eightfiles/lr_h{hap}_{direction}_plusify.bam',
        minusify = '{foo}/lr_sseq_eightfiles/lr_h{hap}_{direction}_minusify.bam'
    params:
        # Provide the correct truth value for each direction
        plusify_truth_value = lambda wildcards: 'true' if wildcards.direction == 'plus' else 'false',
        minusify_truth_value = lambda wildcards: 'false' if wildcards.direction == 'plus' else 'true'
    shell:
        """
        bash workflow/scripts/overlap_ont_sseq.sh {input.lr_bam} {input.sseq_bam} {output.tmp_file} bedtools

        bash workflow/scripts/filter_bam_with_list_directionspecific.sh {input.lr_bam} {output.plusify} {output.tmp_file} {params.plusify_truth_value} samtools
        bash workflow/scripts/filter_bam_with_list_directionspecific.sh {input.lr_bam} {output.minusify} {output.tmp_file} {params.minusify_truth_value} samtools
        """ 



rule flip_one_plusify_or_minusify_bam:
    input: 
        '{foo}/lr_sseq_eightfiles/lr_h{hap}_{direction}_{operation}.bam'
    output:
        output_tmp = '{foo}/lr_sseq_eightfiles_reorient/lr_h{hap}_{direction}_{operation}_executed.bam',
        output =     '{foo}/lr_sseq_eightfiles_reorient/lr_h{hap}_{direction}_{operation}_executed_sort.bam'
    shell:
        """
        bash workflow/scripts/modify_bam_orientation.sh {input} {output.output_tmp} {wildcards.operation} samtools
        samtools sort -o {output.output} {output.output_tmp}

        """

rule merge_eight_into_one:
    input:
        expand('{{foo}}/lr_sseq_eightfiles_reorient/lr_h{hap}_{direction}_{operation}_executed_sort.bam', 
        hap = ["h1", "h2"], direction = ["plus", "minus"], operation = ["plusify", "minusify"])
    output:
        '{foo}/strong_res/strong_reads.bam'
    shell:
        """
        samtools merge {output} {input}
        """

rule haplotag_final_bam:
    input:
        reads_bam = 'res/{sample}/{sseq_cell}/{chr}/strong_res/strong_reads.bam',
        reads_bam_bai = 'res/{sample}/{sseq_cell}/{chr}/strong_res/strong_reads.bam.bai',
        phased_snp_vcf = "res/{sample}/het_vcfs/{chr}.vcf.gz"
    output:
       'res/{sample}/{sseq_cell}/{chr}/strong_res/strong_reads_haplotagged.bam'
    params:
        ref_fa = config['ref_fa'] 
    shell: 
        """
        whatshap haplotag \
                        -o {output} \
                       --reference {params.ref_fa} \
                       {input.phased_snp_vcf} \
                       {input.reads_bam} \
                       --ignore-read-groups \
                       --skip-missing-contigs \
                       --tag-supplementary
        """



# General rules that should be fine regardless of context

rule index_bam:
    input: 
        '{foo}.bam'
    output:
        '{foo}.bam.bai'
    shell:
        """
        samtools index {input}
        """

rule compress_vcf:
    input:
        '{foo}.vcf'
    output:
        '{foo}.vcf.gz',
    shell:
        """
        bgzip -c {input} > {output}
        """
   
rule index_vcf:
    input:
        '{foo}.vcf.gz'
    output:
        '{foo}.vcf.gz.tbi'
    shell:
        """
        tabix -p vcf {input}
        """
